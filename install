#!/bin/bash

if [[ ($# -ne 1) && ($# -ne 2) ]]
then
    echo "Usage: $0 [--live] <directory>"
    exit 1
fi

for arg in "$@"
do
    case "$arg" in
        --live)
            DEST_ROOT='/usr/local/our_stuff'
            ;;
        *)
            EXTRACT_DIR="$arg"
            ;;
    esac
done
DEST_ROOT=${DEST_ROOT:-'/var/tmp/test-our_stuff'}

PACKAGE_NAME='__PACKAGE_NAME__'
PACKAGE_FILE='__PAYLOAD__'

# This is "assert" in the C sense of the word.  Exit if the directory
# doesn't exist and cannot be created.
function AssertDir() {
    if [[ $# -eq 1 ]]
    then
        local DIRPATH=$1
        if [[ ! -d $DIRPATH ]]
        then
            mkdir -p $DIRPATH
            if [[ $? -ne 0 ]]
            then
                echo "Error: $DIRPATH - no such directory, and cannot create."
                exit 1
            fi
        fi
    else
        echo "AssertDir usage error: Must assert exactly one directory name."
        echo "Called as: AssertDir $@"
        exit 1
    fi
}

# Make sure there's a place to expand the tarball.
AssertDir $EXTRACT_DIR
cd $EXTRACT_DIR

if [[ -f $PACKAGE_FILE ]]
then
    # Using 'gzip -dc' vs 'tar zxf' because there are some hosts where
    # tar is too old to understand the 'z'.
    gzip -dc $PACKAGE_FILE | tar xf -
    if [[ $? -ne 0 ]]
    then
        echo "Error: Package extraction of $PACKAGE_FILE failed."
        exit 1
    fi

    if [[ -d $PACKAGE_NAME ]]
    then
        cd $PACKAGE_NAME

        AssertDir $DEST_ROOT

        for dir in bin etc lib sbin
        do
            if [[ -d ${dir} ]]
            then
                # Updates any files that need it, and leaves extra files
                # alone.  This allows multiple packages to have the same
                # root safely, for example.
                rsync -rltpv ${dir}/ ${DEST_ROOT}/${dir}/
            else
                echo "Warning: ${dir}: No such directory in package."
            fi
        done

        # Making all this contingent on there not already being a
        # log directory.  For now, we won't overwrite any changes
        # that have been made to the ownership or permissions after
        # installation.
        LOG_DIR="${DEST_ROOT}/log"
        if [[ ! -d $LOG_DIR ]]
        then
            AssertDir $LOG_DIR
            chmod 750 $LOG_DIR
        fi

        if [[ -d 'vendor' ]]
        then
            cd vendor
            if [[ -f Makefile ]]
            then
                # Repoint the vendor Makefile to whichever installation root
                # we're using this run.
                perl -pi -e 'BEGIN{$d=shift}s|__DESTROOT__|$d|g' $DEST_ROOT Makefile
                gmake
            else
                echo "Warning: No Makefile in 'vendor' directory."
            fi
        else
            echo "Warning: No 'vendor' directory found in package."
        fi
    else
        echo "Error: No $PACKAGE_NAME directory under $EXTRACT_DIR found."
        exit 1
    fi
else
    echo "Error: $PACKAGE_FILE not found in $EXTRACT_DIR.  Exiting."
    exit 1
fi
